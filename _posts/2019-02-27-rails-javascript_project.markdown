---
layout: post
title:      "Rails-Javascript Project"
date:       2019-02-27 20:11:05 +0000
permalink:  rails-javascript_project
---


So I just completed my Rails-Javascript Project and first of all, YESSS!!! One more project to go and then it's post-graduation time. This was a fun app to work on because I got to apply Javascript to my previous project's Rails app. I gotta say I really like working with Javascript, it offers a ton of cool features and helps make code more readable and organized. Not that you can't do it Rails it's just that I needed a lot of code to be able to do what Javascript can do with  less than half of that.  

My Rails app had multiple nested attributes along with one double nested attribute. I did a lot, most likely too much, and it resulted in pages of code that made it difficult to follow the flow when reading it. I was able to abstract much of it out, but the big challenges came from having nested attributes with different named keys, such as: title, name, source all referring to the same thing. I should have just called it all name, but something to keep in my mind for future projects. The other challenge came from whether a link was a single or double nested route. Creating validations for all this became tedious and hard to follow the flow. I know about coding now than I did when I made the Rails app so I could have fixed these things while coding the Javascript portion of the project, but that would have been time consuming so I accepted what was in front of me and tried to see how Javascript could help me. 

Turns out it was very helpful. Much of the issues I had mentioned wasn't really a problem as the Rails Serializer tool was able to eliminate much of the first problem I mentioned above. I let the serializer handle all of that and in the process I learned much about different ways I can manipulate the JSON response when performing an AJAX request. One of my favorite things that I learned was having the JSON response give me only what I want, that way I could parse the information easily. However, because I had different named requests I needed to be able to pass information to the controller from my .js file telling it what attribute I wanted, whether I wanted the extended data from the attribute, or if I wanted all the information from the current user. I read resources about serializers to help me retrieve that data without having to write extensive code. Luckily there were many options and what proved to be useful for me was learning how to compile responses and how to create and delete certain attribute information directly within the serializer. 

With the help from the Rails Serializer working with the issues of the second challenge was no longer a problem. Sure, I still need to write out the single and double nested routes, but because the JSON response was only the information I needed I knew exactly where that data was kept and thus didn't need to write extensive code to find and parse it. What's cool too is that Rails makes this union between it and Javascript so seamless so I didn't need to do much to get everything talking to each other. For my Javascript page (my_life.html.erb) I wanted to make all my attributes available in one page and be able to edit, create, and delete. Doing this was real easy, but I soon realized that there were to many AJAX requests and on top of that when the user really starts adding information to their account the request becomes very long. This is what led to finding solutions using Rails Serializer, in the end I was able to retrieve only the attribute I needed and it's minimal content. I then refactored and removed unneeded AJAX requests. 

Once having solutions to my AJAX problems I began working on my Javascript show page (display_quests.html.erb) for a nested attribute. In this case it was my quest attribute. Having experience now with serializers I used the attributes method given to you by the serializer to add and manipulate it's data. 

After completing my two Javascript pages I then worked on refactoring code and minimizing memory usage in my app. The project required using class prototypes, so that was one way to help with that. From there I also made use of arrow functions and shorthand methods when needed, especially if statements. This helped minimize code and made it legible. Oh yeah, also can't forget about making use of let for defining variables. I'm pretty happy with my app and the experience of making it, but now I'm ready to move to the next lesson. 

